{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Monocle.Auth where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

newtype WhoAmIRequest = WhoAmIRequest {whoAmIRequestNoop :: Hs.Text}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named WhoAmIRequest where
  nameOf _ = (Hs.fromString "WhoAmIRequest")

instance HsProtobuf.HasDefault WhoAmIRequest

instance HsProtobuf.Message WhoAmIRequest where
  encodeMessage
    _
    WhoAmIRequest {whoAmIRequestNoop = whoAmIRequestNoop} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                whoAmIRequestNoop
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure WhoAmIRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "noop")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB WhoAmIRequest where
  toJSONPB (WhoAmIRequest f1) = (HsJSONPB.object ["noop" .= f1])
  toEncodingPB (WhoAmIRequest f1) = (HsJSONPB.pairs ["noop" .= f1])

instance HsJSONPB.FromJSONPB WhoAmIRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "WhoAmIRequest"
        (\obj -> (Hs.pure WhoAmIRequest) <*> obj .: "noop")
    )

instance HsJSONPB.ToJSON WhoAmIRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON WhoAmIRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema WhoAmIRequest where
  declareNamedSchema _ =
    do
      let declare_noop = HsJSONPB.declareSchemaRef
      whoAmIRequestNoop <- declare_noop Proxy.Proxy
      let _ = Hs.pure WhoAmIRequest <*> HsJSONPB.asProxy declare_noop
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "WhoAmIRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("noop", whoAmIRequestNoop)]
                  }
            }
        )

newtype WhoAmIResponse = WhoAmIResponse
  { whoAmIResponseUserid ::
      Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named WhoAmIResponse where
  nameOf _ = (Hs.fromString "WhoAmIResponse")

instance HsProtobuf.HasDefault WhoAmIResponse

instance HsProtobuf.Message WhoAmIResponse where
  encodeMessage
    _
    WhoAmIResponse {whoAmIResponseUserid = whoAmIResponseUserid} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                whoAmIResponseUserid
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure WhoAmIResponse)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "userid")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB WhoAmIResponse where
  toJSONPB (WhoAmIResponse f1) = (HsJSONPB.object ["userid" .= f1])
  toEncodingPB (WhoAmIResponse f1) =
    (HsJSONPB.pairs ["userid" .= f1])

instance HsJSONPB.FromJSONPB WhoAmIResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "WhoAmIResponse"
        (\obj -> (Hs.pure WhoAmIResponse) <*> obj .: "userid")
    )

instance HsJSONPB.ToJSON WhoAmIResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON WhoAmIResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema WhoAmIResponse where
  declareNamedSchema _ =
    do
      let declare_userid = HsJSONPB.declareSchemaRef
      whoAmIResponseUserid <- declare_userid Proxy.Proxy
      let _ = Hs.pure WhoAmIResponse <*> HsJSONPB.asProxy declare_userid
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "WhoAmIResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("userid", whoAmIResponseUserid)]
                  }
            }
        )
