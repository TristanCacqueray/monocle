// Copyright: (c) 2021 Monocle authors
// SPDX-License-Identifier: AGPL-3.0-only

syntax = "proto3";
package monocle_task_data;
option go_package = "monocle/task_data";

import "google/protobuf/timestamp.proto";

message TaskDataCommitRequest {
  string index = 1;
  string crawler = 2;
  string apikey = 3;
  google.protobuf.Timestamp timestamp = 4;
}

enum TaskDataCommitError {
  UnknownIndex = 0;
  UnknownCrawler = 1;
  UnknownApiKey = 2;
  CommitDateInferiorThanPrevious = 3;
  AddFailed = 4;
}

message TaskDataCommitResponse {
  oneof result {
    TaskDataCommitError error = 1;
    google.protobuf.Timestamp timestamp = 2;
  }
 }

enum TaskDataGetLastUpdatedError {
  GetUnknownIndex = 0;
  GetUnknownCrawler = 1;
}

message TaskDataGetLastUpdatedRequest {
  string index = 1;
  string crawler = 2;
}

message TaskDataGetLastUpdatedResponse {
  oneof result {
    TaskDataGetLastUpdatedError error = 1;
    google.protobuf.Timestamp timestamp = 2;
  }
 }

message TaskData {
  google.protobuf.Timestamp updated_at = 1;
  string change_url = 2;
  repeated string ttype = 3;
  string tid = 4;
  string url = 5;
  string title = 6;
  string severity = 7;
  string priority = 8;
  int32 score = 9;
}

message AddRequest {
  string index = 1;
  string crawler = 2;
  string apikey = 3;
  repeated TaskData items = 4;
}

message AddResponse {
  oneof result {
    // TODO: define a header message with generic error
    // then do not re-use the commit error enum.
    TaskDataCommitError error = 1;
  }
}
